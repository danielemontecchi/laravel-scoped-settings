{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Laravel Scoped Settings","text":"<p>Laravel Scoped Settings is a powerful and flexible package for managing configuration and preferences at both the global level and the model (user, team, etc.) level. It provides a clean API for setting, getting, and organizing data using scopes and logical groups.</p>"},{"location":"#key-features","title":"\u2728 Key Features","text":"<ul> <li>\u2705 Store settings globally or per Eloquent model  </li> <li>\u2705 Simple fluent API using <code>setting()</code> helper or <code>Setting::</code> facade  </li> <li>\u2705 Support for nested grouping using dot notation (e.g. <code>notifications.email</code>)  </li> <li>\u2705 Automatic casting of scalars and arrays (JSON handling)  </li> <li>\u2705 Artisan commands to list, clear and export settings  </li> <li>\u2705 Built-in support for versioned documentation via mike</li> </ul>"},{"location":"#when-to-use-this-package","title":"\ud83e\udde0 When to use this package","text":"<p>Use Laravel Scoped Settings when you need to:</p> <ul> <li>Store application-wide configurations editable at runtime</li> <li>Allow user-specific preferences, like UI themes or notification settings</li> <li>Enable team or organization scoped settings</li> <li>Group settings logically and retrieve them with minimal code</li> <li>Handle per-user fallback to global defaults with manual logic</li> </ul>"},{"location":"#example-use-cases","title":"\u2699\ufe0f Example use cases","text":"<ul> <li>UI preferences (light/dark mode, layout)</li> <li>Notification toggles (email, push)</li> <li>Feature flags per customer or team</li> <li>Custom limits, regional/localization settings</li> <li>Multi-tenant configurations</li> </ul>"},{"location":"#requirements","title":"\ud83d\udce6 Requirements","text":"<ul> <li>PHP &gt;= 8.1  </li> <li>Laravel 10 or 11  </li> <li>Composer, Git, and optionally GitHub Pages for docs</li> </ul>"},{"location":"#next-steps","title":"\ud83d\udcda Next Steps","text":"<ul> <li>Installation</li> <li>How to Use</li> <li>Scoping Settings</li> <li>Artisan Commands</li> <li>API Reference</li> <li>Changelog</li> </ul> <p>This package is maintained by Daniele Montecchi and released under the MIT License.</p>"},{"location":"api/","title":"API Reference","text":"<p>This section describes the core methods available through the <code>SettingsManager</code> class, accessible via the <code>setting()</code> helper or the <code>Setting</code> facade.</p>"},{"location":"api/#setstring-key-mixed-value-void","title":"<code>set(string $key, mixed $value): void</code>","text":"<p>Sets a setting value.</p> <pre><code>setting()-&gt;set('app.locale', 'en');\n</code></pre> <p>The <code>$value</code> can be a string, boolean, number, or array.</p>"},{"location":"api/#getstring-key-mixed-default-null-mixed","title":"<code>get(string $key, mixed $default = null): mixed</code>","text":"<p>Gets a setting value. If not found, returns the <code>$default</code>.</p> <pre><code>$value = setting()-&gt;get('app.locale', 'en');\n</code></pre>"},{"location":"api/#forgetstring-key-void","title":"<code>forget(string $key): void</code>","text":"<p>Deletes a specific setting.</p> <pre><code>setting()-&gt;forget('app.locale');\n</code></pre>"},{"location":"api/#hasstring-key-bool","title":"<code>has(string $key): bool</code>","text":"<p>Check if a setting exists for the given key. This method respects the current scope (global or model).</p> <pre><code>setting()-&gt;has('app.debug'); // true or false\nsetting()-&gt;for($user)-&gt;has('notifications.enabled'); // true or false\n</code></pre> <p>Useful for conditional logic based on whether a setting has been stored or overridden.</p>"},{"location":"api/#flush-void","title":"<code>flush(): void</code>","text":"<p>Delete all settings associated with the current scope. It is useful for resetting settings for a specific model.</p> <pre><code>setting()-&gt;for($user)-&gt;flush();\n</code></pre> <p>This will remove all keys stored for the provided scope (e.g., the <code>$user</code> model).</p>"},{"location":"api/#all-array","title":"<code>all(): array</code>","text":"<p>Returns all settings as a flattened array (including group + key):</p> <pre><code>[\n  \"site.name\" =&gt; \"My App\",\n  \"ui.theme\" =&gt; \"dark\"\n]\n</code></pre>"},{"location":"api/#groupstring-group-array","title":"<code>group(string $group): array</code>","text":"<p>Returns all settings within a given group:</p> <pre><code>setting()-&gt;group('ui');\n// ['theme' =&gt; 'dark']\n</code></pre>"},{"location":"api/#formodel-model-settingsmanager","title":"<code>for(Model $model): SettingsManager</code>","text":"<p>Scopes the manager to a specific Eloquent model.</p> <pre><code>setting()-&gt;for($user)-&gt;set('locale', 'it');\n</code></pre>"},{"location":"api/#forglobal-settingsmanager","title":"<code>forGlobal(): SettingsManager</code>","text":"<p>Resets the manager to the global scope explicitly.</p> <pre><code>setting()-&gt;forGlobal()-&gt;get('site.name');\n</code></pre>"},{"location":"api/#clearscope-settingsmanager","title":"<code>clearScope(): SettingsManager</code>","text":"<p>Clears the current scope from the instance.</p> <pre><code>setting()-&gt;for($user)-&gt;clearScope()-&gt;get('site.name');\n</code></pre>"},{"location":"api/#notes","title":"\ud83d\udca1 Notes","text":"<ul> <li>All keys are parsed as <code>group.key</code> internally  </li> <li>Setting values are serialized as JSON  </li> <li>Scoped values are isolated from global ones</li> </ul>"},{"location":"api/#you-may-also-like","title":"\ud83d\udcda You may also like","text":"<ul> <li>Usage</li> <li>Scoping</li> <li>Artisan Commands</li> </ul>"},{"location":"artisan/","title":"Artisan Commands","text":"<p>Laravel Scoped Settings comes with helpful Artisan commands to inspect, export, and clear settings directly from the CLI.</p> <p>These commands are useful for debugging, backup/restore workflows, or administrative tasks.</p>"},{"location":"artisan/#list-all-settings","title":"\ud83d\udccb List all settings","text":"<pre><code>php artisan settings:list\n</code></pre> <p>Displays a table of all stored settings, including their scope (if any), group, key, and value.</p> <p>Example output:</p> <pre><code>+----+--------------------+----------+------------+---------------+--------+\n| ID | Scope Type         | Scope ID | Group      | Key           | Value  |\n+----+--------------------+----------+------------+---------------+--------+\n| 1  | NULL               | NULL     | site       | name          | Laravel|\n| 2  | App\\Models\\User    | 1        | ui         | theme         | dark   |\n+----+--------------------+----------+------------+---------------+--------+\n</code></pre>"},{"location":"artisan/#clear-settings","title":"\ud83e\uddf9 Clear settings","text":"<pre><code>php artisan settings:clear\n</code></pre> <p>This command deletes all settings.</p> <p>You can also target scoped settings:</p> <pre><code>php artisan settings:clear --scope_type=\"App\\\\Models\\\\User\" --scope_id=1\n</code></pre> <p>This will delete only the settings for the given model instance.</p>"},{"location":"artisan/#export-settings","title":"Export Settings","text":"<pre><code>php artisan settings:export\n</code></pre> <p>Exports all settings to <code>storage/app/settings/YYYYMMDD_HHMMSS_settings_export.json</code></p> <p>Options:</p> <ul> <li><code>--only-global</code> \u2192 export only global settings</li> <li><code>--scope-type=...</code> \u2192 export by model type</li> <li><code>--scope-id=...</code> \u2192 export by model type + ID</li> </ul>"},{"location":"artisan/#import-settings","title":"Import Settings","text":"<pre><code>php artisan settings:import path/to/file.json\n</code></pre> <p>Imports settings from a previously exported JSON file.</p> <p>Options:</p> <ul> <li><code>--merge</code> \u2192 update existing values (default)</li> <li><code>--overwrite</code> \u2192 delete existing and fully replace</li> </ul>"},{"location":"artisan/#tips","title":"\ud83d\udca1 Tips","text":"<ul> <li>Use <code>settings:clear</code> before re-importing from a backup</li> <li>Combine <code>settings:dump</code> with redirects: <code>&gt; backup.json</code></li> <li>Use the output to migrate settings across environments</li> </ul>"},{"location":"artisan/#next","title":"\ud83d\udcda Next","text":"<ul> <li>API Reference</li> </ul>"},{"location":"changelog/","title":"Changelog","text":"<p>Below are the available documentation versions, with their corresponding changes.</p>"},{"location":"changelog/#latest","title":"Latest","text":"<p>Alias for the most recent stable version of the documentation.</p>"},{"location":"changelog/#v110-2025-04-17","title":"v1.1.0 (2025-04-17)","text":"<ul> <li><code>remember()</code> method to optionally cache retrieved settings.</li> <li>Automatic fallback from scoped to global settings in <code>get()</code> method.</li> <li>Artisan commands:</li> <li><code>settings:export</code> to export settings to a file.</li> <li><code>settings:import</code> to import settings with merge or overwrite options.</li> <li>Deprecated <code>settings:dump</code> command (replaced by export/import).</li> </ul>"},{"location":"changelog/#v103-2025-04-17","title":"v1.0.3 (2025-04-17)","text":"<ul> <li>Refactored deployment logic and documentation generation via GitHub Actions.</li> <li>Improved <code>prepare-docs.sh</code> for more robust and automated publishing.</li> <li>Auto-generation of <code>latest</code> alias and <code>index.html</code> redirect.</li> <li>GitHub issue templates for bugs, features, docs, and questions.</li> <li>Label sync workflow based on <code>.github/labels.yml</code>.</li> </ul>"},{"location":"changelog/#v102-2025-04-16","title":"v1.0.2 (2025-04-16)","text":"<ul> <li><code>has($key)</code> method to check if a setting exists.</li> <li><code>flush()</code> method to delete all scoped settings for a model.</li> </ul>"},{"location":"changelog/#v101-2025-04-16","title":"v1.0.1 (2025-04-16)","text":"<ul> <li>Fixed GitHub Actions permissions to allow <code>gh-pages</code> deployment via <code>GH_TOKEN</code></li> <li>Enhanced <code>prepare-docs.sh</code> compatibility by fixing unsupported grep usage</li> <li>Documentation deploy now fully automated on new tags via <code>mike deploy</code></li> </ul>"},{"location":"changelog/#v100-2025-04-16","title":"v1.0.0 (2025-04-16)","text":"<ul> <li>Global and model-scoped settings management with fluent API</li> <li><code>setting()</code> helper and <code>Setting::</code> facade for easy access</li> <li>JSON-based value storage with automatic type casting</li> <li>Dot notation support for grouped key organization</li> <li>Ability to scope settings to any Eloquent model (user, team, etc.)</li> <li>Artisan commands: <code>settings:list</code>, <code>settings:clear</code>, <code>settings:dump</code></li> <li>Fully versioned documentation using MkDocs + mike</li> <li>Version warning banners for outdated docs</li> <li>GitHub Actions for testing and docs deployment</li> <li>README with badges, install instructions, and usage examples</li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>Laravel Scoped Settings can be easily installed via Composer and integrates automatically with Laravel\u2019s package discovery system.</p>"},{"location":"installation/#requirements","title":"\ud83d\udce6 Requirements","text":"<ul> <li>PHP &gt;= 8.1  </li> <li>Laravel 10 or 11  </li> <li>Composer</li> </ul>"},{"location":"installation/#install-the-package","title":"\ud83d\ude80 Install the package","text":"<p>Use Composer to install the package:</p> <pre><code>composer require danielemontecchi/laravel-scoped-settings\n</code></pre> <p>Laravel will auto-discover the service provider and facade.</p>"},{"location":"installation/#publish-configuration-optional","title":"\ud83d\udd27 Publish configuration (optional)","text":"<p>You can publish the default configuration and migration files using:</p> <pre><code>php artisan vendor:publish --tag=\"laravel-scoped-settings-config\"\nphp artisan vendor:publish --tag=\"laravel-scoped-settings-migrations\"\n</code></pre> <p>This allows you to customize the database structure or config options as needed.</p>"},{"location":"installation/#run-the-migration","title":"\ud83d\uddc3\ufe0f Run the migration","text":"<p>Create the <code>settings</code> table:</p> <pre><code>php artisan migrate\n</code></pre>"},{"location":"installation/#run-tests-optional","title":"\ud83e\uddea Run tests (optional)","text":"<p>To make sure everything is working, you can run the test suite:</p> <pre><code>./vendor/bin/pest\n</code></pre>"},{"location":"installation/#continue-with-usage","title":"\ud83d\udcda Continue with usage","text":"<p>Once installed, proceed to the Usage guide to learn how to store and retrieve settings.</p>"},{"location":"scoping/","title":"Scoping","text":"<p>Scoped settings allow you to store and retrieve values that are linked to a specific Eloquent model, such as a <code>User</code>, <code>Team</code>, <code>Tenant</code>, or any other entity.</p> <p>This feature is useful when you want personalized settings per user, customer, team, etc.</p>"},{"location":"scoping/#scoping-to-a-model","title":"\ud83d\udc64 Scoping to a model","text":"<p>You can associate a setting with a specific model using <code>for($model)</code>:</p> <pre><code>$user = User::find(1);\nsetting()-&gt;for($user)-&gt;set('dashboard.layout', 'compact');\n\n$layout = setting()-&gt;for($user)-&gt;get('dashboard.layout');\n// 'compact'\n</code></pre> <p>This setting will only apply to that user.</p>"},{"location":"scoping/#global-vs-scoped","title":"\ud83c\udfaf Global vs Scoped","text":"<p>Without <code>for()</code>, settings are considered global:</p> <pre><code>setting()-&gt;set('locale', 'en'); // Global\nsetting()-&gt;for($user)-&gt;set('locale', 'it'); // User-specific\n</code></pre> <p>You can retrieve the global value explicitly with:</p> <pre><code>setting()-&gt;forGlobal()-&gt;get('locale');\n</code></pre>"},{"location":"scoping/#using-custom-models","title":"\ud83d\udc65 Using custom models","text":"<p>You can scope to any model that extends <code>Illuminate\\Database\\Eloquent\\Model</code>:</p> <pre><code>$team = Team::find(5);\nsetting()-&gt;for($team)-&gt;set('theme', 'dark');\n</code></pre>"},{"location":"scoping/#overriding-global-with-scoped-values","title":"\ud83d\udd04 Overriding global with scoped values","text":"<p>You can have the same key defined at different scopes:</p> <pre><code>setting()-&gt;set('notifications.email', true);             // global\nsetting()-&gt;for($user)-&gt;set('notifications.email', false); // scoped\n</code></pre> <p>You decide at runtime which to use based on context.</p>"},{"location":"scoping/#testing-scoped-values","title":"\ud83e\uddea Testing scoped values","text":"<pre><code>$user = User::factory()-&gt;create();\n\nsetting()-&gt;for($user)-&gt;set('timezone', 'Europe/Rome');\n\nexpect(setting()-&gt;for($user)-&gt;get('timezone'))-&gt;toBe('Europe/Rome');\n</code></pre>"},{"location":"scoping/#caching-per-scope","title":"\u26a1 Caching per scope","text":"<p>When using <code>set()</code> on scoped or global settings, you can enable caching by providing a TTL:</p> <pre><code>setting()-&gt;for($user)-&gt;set('dashboard.layout', 'compact', 600); // cache 10 minutes\n</code></pre> <p>If you omit the TTL, the system will look for defaults in the config:</p> <pre><code>// uses config('scoped-settings.cache.scoped_ttl') or global_ttl\nsetting()-&gt;for($user)-&gt;set('dashboard.layout', 'compact');\n</code></pre> <p>Cached values will be returned by <code>get()</code> automatically when available.</p>"},{"location":"scoping/#tip","title":"\ud83d\udca1 Tip","text":"<p>If you're using the settings in a controller or service and want to keep it scoped to the authenticated user:</p> <pre><code>setting()-&gt;for(auth()-&gt;user())-&gt;get('some.preference');\n</code></pre>"},{"location":"scoping/#continue-with","title":"\ud83d\udcda Continue with","text":"<ul> <li>Artisan Commands</li> <li>API Reference</li> </ul>"},{"location":"usage/","title":"Usage","text":"<p>Laravel Scoped Settings provides a fluent and expressive API to store, retrieve and organize configuration values at runtime.</p> <p>You can access the settings manager using:</p> <ul> <li>the <code>setting()</code> helper (recommended)</li> <li>or the <code>Setting::</code> facade</li> </ul>"},{"location":"usage/#basic-usage","title":"\u2705 Basic usage","text":""},{"location":"usage/#set-a-global-setting","title":"Set a global setting","text":"<pre><code>setting()-&gt;set('site.name', 'My Laravel App');\n</code></pre>"},{"location":"usage/#set-a-value-with-caching","title":"Set a value with caching","text":"<pre><code>// Cache the setting for 30 minutes\nsetting()-&gt;set('site.enabled', true, 1800);\n\n// Use config-defined TTL (if set), or no cache if null\nsetting()-&gt;set('site.enabled', true);\n</code></pre>"},{"location":"usage/#get-a-setting","title":"Get a setting","text":"<pre><code>$siteName = setting()-&gt;get('site.name'); // 'My Laravel App'\n// If a TTL is configured, the value will be cached automatically.\n</code></pre>"},{"location":"usage/#check-if-a-setting-exists","title":"Check if a setting exists","text":"<pre><code>if (setting()-&gt;has('ui.theme')) {\n    // It was set\n}\n</code></pre>"},{"location":"usage/#provide-a-default-fallback","title":"Provide a default fallback","text":"<pre><code>$timezone = setting()-&gt;get('app.timezone', 'UTC');\n</code></pre>"},{"location":"usage/#forget-a-setting","title":"Forget a setting","text":"<pre><code>setting()-&gt;forget('site.name');\n</code></pre>"},{"location":"usage/#deleting-all-settings-for-a-model","title":"Deleting all settings for a model","text":"<pre><code>setting()-&gt;for($user)-&gt;flush();\n</code></pre>"},{"location":"usage/#value-types","title":"\ud83d\udce6 Value types","text":"<p>Values are automatically serialized to/from JSON. You can store:</p> <ul> <li>Strings  </li> <li>Booleans  </li> <li>Integers  </li> <li>Arrays</li> </ul> <pre><code>setting()-&gt;set('notifications.enabled', true);\nsetting()-&gt;set('ui.theme', ['color' =&gt; 'blue', 'mode' =&gt; 'dark']);\n\n$theme = setting()-&gt;get('ui.theme'); // ['color' =&gt; 'blue', 'mode' =&gt; 'dark']\n</code></pre>"},{"location":"usage/#key-format-and-grouping","title":"\ud83e\udde0 Key format and grouping","text":"<p>You can group settings using dot notation:</p> <pre><code>setting()-&gt;set('seo.meta.title', 'Welcome!');\n</code></pre> <p>This will be stored as:</p> <ul> <li>group: <code>seo.meta</code></li> <li>key: <code>title</code></li> </ul> <p>Or, if split:</p> <pre><code>setting()-&gt;set('seo.meta_title', 'Welcome!');\n</code></pre> <p>Will be stored as:</p> <ul> <li>group: <code>seo</code></li> <li>key: <code>meta_title</code></li> </ul> <p>You can later retrieve an entire group:</p> <pre><code>setting()-&gt;group('seo');\n// returns ['meta_title' =&gt; 'Welcome!']\n</code></pre>"},{"location":"usage/#testing-in-your-code","title":"\ud83e\uddea Testing in your code","text":"<p>During testing you can easily assert settings:</p> <pre><code>expect(setting()-&gt;get('notifications.enabled'))-&gt;toBeTrue();\n</code></pre>"},{"location":"usage/#next-steps","title":"\ud83d\udcda Next Steps","text":"<ul> <li>Scoping Settings</li> <li>Artisan Commands</li> <li>API Reference</li> </ul>"},{"location":"partials/version-warning/","title":"Version warning","text":"<p>Outdated Documentation</p> <p>You are viewing documentation for an older version ({{ version }}). \ud83d\udc49 Click here for the latest version</p>"}]}